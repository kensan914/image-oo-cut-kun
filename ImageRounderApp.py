import os
import threading
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from tkinter import filedialog
from image_rounder import round_image

file_separate_sign = "|"
max_progress = 100
icon_data = ""

def click_input_files_dialog():
    progress.set(40)
    file_type = [("", "*")]
    input_images_path = filedialog.askopenfilename(filetype=file_type, multiple=True)
    files_entry.set(file_separate_sign.join(input_images_path))

def click_output_folder_dialog():
    progress.set(10)
    init_dir = os.path.abspath(os.path.dirname(__file__))
    output_folder_path = filedialog.askdirectory(initialdir = init_dir)
    folder_entry.set(output_folder_path)

def round_image_target(input_images_path_list, output_folder_path):
    progressbar.pack(fill="x", side="left")
    progress.set(0)
    for i, input_image_path in enumerate(input_images_path_list):
        round_image(input_image_path, output_folder_path)
        next_progress = ((i + 1) / len(input_images_path_list)) * max_progress
        progress.set(int(next_progress))
    messagebox.showinfo("完了", "ヒャッハーーっ❕❕\n俺様がズタズタに切り裂いてやったぞ❕❕\n次の獲物は貴様かもな❕❕震えて眠るんだな❕❕ヒャッハーーっ❕❕")
    progressbar.pack_forget()

def exe_round_image():
    input_images_path_list = files_entry.get().split(file_separate_sign)
    output_folder_path = folder_entry.get()
    if not input_images_path_list or len(input_images_path_list) > 0 and not input_images_path_list[0]:
        messagebox.showerror("エラー", "ヒャッハーーっ❕❕\n入力画像が選択されてないぜ❕❕\nさすがの俺様も無いもんは斬れねえぜ❕❔")
        return
    if not output_folder_path:
        messagebox.showerror("エラー", "ヒャッハーーっ❕❕\n出力フォルダが選択されてないぜ❕❕\n斬った獲物達をこの俺様が持って帰って喰っちまうぜ❕❔")
        return

    t = threading.Thread(target=round_image_target, args=(input_images_path_list, output_folder_path))
    t.start()


if __name__ == "__main__":

    # root
    root = Tk()
    root.tk.call("wm", "iconphoto", root._w, PhotoImage(data=icon_data))
    root.title("画像丸々カットくん")

    # Frame2
    frame1 = ttk.Frame(root, padding=10)
    frame1.grid(row=0, column=1, sticky=E)

    IFileLabel = ttk.Label(frame1, text="入力画像 (複数可)", padding=(5, 2))
    IFileLabel.pack(side=LEFT)

    files_entry = StringVar()
    IFileEntry = ttk.Entry(frame1, textvariable=files_entry, width=30)
    IFileEntry.pack(side=LEFT)

    IFileButton = ttk.Button(frame1, text="参照", command=click_input_files_dialog)
    IFileButton.pack(side=LEFT)

    # Frame1
    frame2 = ttk.Frame(root, padding=10)
    frame2.grid(row=2, column=1, sticky=E)

    IDirLabel = ttk.Label(frame2, text="出力フォルダ", padding=(5, 2))
    IDirLabel.pack(side=LEFT)

    folder_entry = StringVar()
    IDirEntry = ttk.Entry(frame2, textvariable=folder_entry, width=30)
    IDirEntry.pack(side=LEFT)

    IDirButton = ttk.Button(frame2, text="参照", command=click_output_folder_dialog)
    IDirButton.pack(side=LEFT)

    # Frame3
    frame3 = ttk.Frame(root, padding=10)
    frame3.grid(row=5,column=1,sticky=W)

    button1 = ttk.Button(frame3, text="実行", command=exe_round_image)
    button1.pack(fill= "x", padx=150, side="left")

    # Frame 4
    frame4 = ttk.Frame(root, padding=10)
    frame4.grid(row=6, column=1, sticky="w")
    progress = IntVar(value=0)
    progressbar = ttk.Progressbar(
        frame4,
        length=380,
        maximum=max_progress,
        mode="determinate",
        variable=progress,
    )

    root.mainloop()
# pyinstaller ImageRounderApp.py --onefile --noconsole --icon=icon.ico --name 画像丸々カットくん